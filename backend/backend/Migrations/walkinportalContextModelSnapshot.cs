// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Models;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(walkinportalContext))]
    partial class walkinportalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("backend.Models.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("application_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("HallTicket")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("hallticket");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<string>("Resume")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("resume");

                    b.Property<int>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("slot_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ApplicationId");

                    b.HasIndex(new[] { "JobId" }, "fk_application_jobs1_idx");

                    b.HasIndex(new[] { "SlotId" }, "fk_application_slots1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_application_users1_idx");

                    b.ToTable("application", (string)null);
                });

            modelBuilder.Entity("backend.Models.ApplicationRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("application_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("RoleId", "ApplicationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ApplicationId" }, "fk_roles_has_application_application1_idx");

                    b.HasIndex(new[] { "RoleId" }, "fk_roles_has_application_roles1_idx");

                    b.ToTable("application_roles", (string)null);
                });

            modelBuilder.Entity("backend.Models.ApplicationType", b =>
                {
                    b.Property<int>("ApplicationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("application_type_id");

                    b.Property<string>("ApplicationTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("application_type_name");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ApplicationTypeId");

                    b.HasIndex(new[] { "ApplicationTypeName" }, "application_type_name_UNIQUE")
                        .IsUnique();

                    b.ToTable("application_types", (string)null);
                });

            modelBuilder.Entity("backend.Models.College", b =>
                {
                    b.Property<int>("CollegeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("college_id");

                    b.Property<string>("CollegeName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("college_name");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.HasKey("CollegeId");

                    b.HasIndex(new[] { "CollegeName" }, "college_name_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "LocationId" }, "fk_colleges_locations_idx");

                    b.ToTable("colleges", (string)null);
                });

            modelBuilder.Entity("backend.Models.EducationalQualification", b =>
                {
                    b.Property<int>("EducationalQualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("edqualification_id");

                    b.Property<int>("CollegeId")
                        .HasColumnType("int")
                        .HasColumnName("college_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("OtherCollege")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("other_college");

                    b.Property<string>("OtherCollegeLocation")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("other_college_location");

                    b.Property<int>("PassingYear")
                        .HasColumnType("year")
                        .HasColumnName("passing_year");

                    b.Property<decimal?>("Percentage")
                        .HasPrecision(5)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("percentage");

                    b.Property<int>("QualificationId")
                        .HasColumnType("int")
                        .HasColumnName("qualification_id");

                    b.Property<int>("StreamId")
                        .HasColumnType("int")
                        .HasColumnName("stream_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("EducationalQualificationId");

                    b.HasIndex(new[] { "CollegeId" }, "fk_edqualification_colleges1_idx");

                    b.HasIndex(new[] { "QualificationId" }, "fk_edqualification_qualifications1_idx");

                    b.HasIndex(new[] { "StreamId" }, "fk_edqualification_streams1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_edqualification_users1_idx");

                    b.ToTable("edqualification", (string)null);
                });

            modelBuilder.Entity("backend.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("FromTime")
                        .HasColumnType("date")
                        .HasColumnName("from_time");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("job_name");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("ThingsToRem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("things_to_remember");

                    b.Property<DateTime?>("ToTime")
                        .HasColumnType("date")
                        .HasColumnName("to_time");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("venue");

                    b.HasKey("JobId");

                    b.HasIndex(new[] { "LocationId" }, "fk_jobs_locations1_idx");

                    b.ToTable("jobs", (string)null);
                });

            modelBuilder.Entity("backend.Models.JobDesc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("DescTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("desc_title");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "JobId" }, "fk_job_desc_jobs1_idx");

                    b.ToTable("job_desc", (string)null);
                });

            modelBuilder.Entity("backend.Models.JobRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<decimal?>("Package")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("package");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "JobId" }, "fk_job_roles_jobs1_idx");

                    b.HasIndex(new[] { "RoleId" }, "fk_job_roles_roles1_idx");

                    b.ToTable("job_roles", (string)null);
                });

            modelBuilder.Entity("backend.Models.JobRoleDesc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("DescTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("desc_title");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("RolesId")
                        .HasColumnType("int")
                        .HasColumnName("roles_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RolesId" }, "fk_job_roles_desc_job_roles1_idx");

                    b.ToTable("job_roles_desc", (string)null);
                });

            modelBuilder.Entity("backend.Models.JobSlot", b =>
                {
                    b.Property<int>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("slot_id");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("SlotId", "JobId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "JobId" }, "fk_slots_has_jobs_jobs1_idx");

                    b.HasIndex(new[] { "SlotId" }, "fk_slots_has_jobs_slots1_idx");

                    b.ToTable("job_slots", (string)null);
                });

            modelBuilder.Entity("backend.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location_name");

                    b.HasKey("LocationId");

                    b.HasIndex(new[] { "LocationName" }, "location_name_UNIQUE")
                        .IsUnique();

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("backend.Models.ProfessionalQualification", b =>
                {
                    b.Property<int>("ProfessionalQualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("proqualification_id");

                    b.Property<sbyte?>("AppearedZeusTest")
                        .HasColumnType("tinyint")
                        .HasColumnName("appeared_zeus_test");

                    b.Property<int>("ApplicationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("application_type_id");

                    b.Property<decimal?>("CurrentCTC")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("current_ctc");

                    b.Property<sbyte?>("CurrentlyOnNoticePeriod")
                        .HasColumnType("tinyint")
                        .HasColumnName("currently_on_notice_period");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ExpYear")
                        .HasColumnType("year")
                        .HasColumnName("exp_year");

                    b.Property<decimal?>("ExpectedCTC")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("expected_ctc");

                    b.Property<DateTime?>("NoticeEnd")
                        .HasColumnType("date")
                        .HasColumnName("notice_end");

                    b.Property<int?>("NoticePeriodLength")
                        .HasColumnType("int")
                        .HasColumnName("notice_period_length");

                    b.Property<string>("OtherExpertTechs")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("other_expert_techs");

                    b.Property<string>("OtherFamiliarTechs")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("other_familiar_techs");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("ZeusTestRole")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("zeus_test_role");

                    b.HasKey("ProfessionalQualificationId");

                    b.HasIndex(new[] { "ApplicationTypeId" }, "fk_proqualification_application_types1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_proqualification_users1_idx");

                    b.ToTable("proqualification", (string)null);
                });

            modelBuilder.Entity("backend.Models.ProfessionalQualificationExpertTech", b =>
                {
                    b.Property<int>("TechId")
                        .HasColumnType("int")
                        .HasColumnName("tech_id");

                    b.Property<int>("ProfessionalQualificationId")
                        .HasColumnType("int")
                        .HasColumnName("proqualification_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("TechId", "ProfessionalQualificationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProfessionalQualificationId" }, "fk_techs_has_proqualification_proqualification1_idx");

                    b.HasIndex(new[] { "TechId" }, "fk_techs_has_proqualification_techs1_idx");

                    b.ToTable("proqualification_experttechs", (string)null);
                });

            modelBuilder.Entity("backend.Models.ProfessionalQualificationFamiliarTech", b =>
                {
                    b.Property<int>("TechId")
                        .HasColumnType("int")
                        .HasColumnName("tech_id");

                    b.Property<int>("ProfessionalQualificationId")
                        .HasColumnType("int")
                        .HasColumnName("proqualification_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("TechId", "ProfessionalQualificationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProfessionalQualificationId" }, "fk_techs_has_proqualification_proqualification2_idx");

                    b.HasIndex(new[] { "TechId" }, "fk_techs_has_proqualification_techs2_idx");

                    b.ToTable("proqualification_familiartechs", (string)null);
                });

            modelBuilder.Entity("backend.Models.Qualification", b =>
                {
                    b.Property<int>("QualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("qualification_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("QualificationName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("qualification_name");

                    b.HasKey("QualificationId");

                    b.HasIndex(new[] { "QualificationName" }, "qualification_name_UNIQUE")
                        .IsUnique();

                    b.ToTable("qualifications", (string)null);
                });

            modelBuilder.Entity("backend.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.HasIndex(new[] { "RoleName" }, "role_name_UNIQUE")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("backend.Models.Slot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("slot_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time")
                        .HasColumnName("from_time");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time")
                        .HasColumnName("to_time");

                    b.HasKey("SlotId");

                    b.ToTable("slots", (string)null);
                });

            modelBuilder.Entity("backend.Models.Stream", b =>
                {
                    b.Property<int>("StreamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("stream_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("StreamName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("stream_name");

                    b.HasKey("StreamId");

                    b.HasIndex(new[] { "StreamName" }, "stream_name_UNIQUE")
                        .IsUnique();

                    b.ToTable("streams", (string)null);
                });

            modelBuilder.Entity("backend.Models.Technology", b =>
                {
                    b.Property<int>("TechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tech_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("TechName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tech_name");

                    b.HasKey("TechnologyId");

                    b.HasIndex(new[] { "TechName" }, "tech_name_UNIQUE")
                        .IsUnique();

                    b.ToTable("techs", (string)null);
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Email" }, "email_UNIQUE")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("backend.Models.Userasset", b =>
                {
                    b.Property<int>("UserassetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userasset_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ProfilePhoto")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("profile_photo");

                    b.Property<string>("Resume")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("resume");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("UserassetId");

                    b.HasIndex(new[] { "UserId" }, "fk_userassets_users1_idx");

                    b.ToTable("userassets", (string)null);
                });

            modelBuilder.Entity("backend.Models.Userdetail", b =>
                {
                    b.Property<int>("UserdetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userdetail_id");

                    b.Property<int>("Countrycode")
                        .HasColumnType("int")
                        .HasColumnName("countrycode");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<decimal>("PhoneNo")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("phone_no");

                    b.Property<string>("PortfolioUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("portfolio_url");

                    b.Property<string>("ReferalEmpName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("referal_emp_name");

                    b.Property<sbyte?>("SendMeUpdate")
                        .HasColumnType("tinyint")
                        .HasColumnName("send_me_update");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("UserdetailId");

                    b.HasIndex(new[] { "UserId" }, "fk_userdetails_users1_idx");

                    b.ToTable("userdetails", (string)null);
                });

            modelBuilder.Entity("backend.Models.UserdetailsRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("UserdetailId")
                        .HasColumnType("int")
                        .HasColumnName("userdetail_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("RoleId", "UserdetailId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "fk_roles_has_userdetails_roles1_idx");

                    b.HasIndex(new[] { "UserdetailId" }, "fk_roles_has_userdetails_userdetails1_idx");

                    b.ToTable("userdetails_roles", (string)null);
                });

            modelBuilder.Entity("backend.Models.Application", b =>
                {
                    b.HasOne("backend.Models.Job", "Job")
                        .WithMany("Applications")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("fk_application_jobs1");

                    b.HasOne("backend.Models.Slot", "Slot")
                        .WithMany("Applications")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("fk_application_slots1");

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_application_users1");

                    b.Navigation("Job");

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.ApplicationRole", b =>
                {
                    b.HasOne("backend.Models.Application", "Application")
                        .WithMany("ApplicationRoles")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("fk_roles_has_application_application1");

                    b.HasOne("backend.Models.Role", "Role")
                        .WithMany("ApplicationRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_roles_has_application_roles1");

                    b.Navigation("Application");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("backend.Models.College", b =>
                {
                    b.HasOne("backend.Models.Location", "Location")
                        .WithMany("Colleges")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("fk_colleges_locations");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("backend.Models.EducationalQualification", b =>
                {
                    b.HasOne("backend.Models.College", "College")
                        .WithMany("EducationalQualifications")
                        .HasForeignKey("CollegeId")
                        .IsRequired()
                        .HasConstraintName("fk_edqualification_colleges1");

                    b.HasOne("backend.Models.Qualification", "Qualification")
                        .WithMany("EducationalQualifications")
                        .HasForeignKey("QualificationId")
                        .IsRequired()
                        .HasConstraintName("fk_edqualification_qualifications1");

                    b.HasOne("backend.Models.Stream", "Stream")
                        .WithMany("EducationalQualifications")
                        .HasForeignKey("StreamId")
                        .IsRequired()
                        .HasConstraintName("fk_edqualification_streams1");

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("EducationalQualifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_edqualification_users1");

                    b.Navigation("College");

                    b.Navigation("Qualification");

                    b.Navigation("Stream");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Job", b =>
                {
                    b.HasOne("backend.Models.Location", "Location")
                        .WithMany("Jobs")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("fk_jobs_locations1");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("backend.Models.JobDesc", b =>
                {
                    b.HasOne("backend.Models.Job", "Job")
                        .WithMany("JobDescs")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("fk_job_desc_jobs1");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("backend.Models.JobRole", b =>
                {
                    b.HasOne("backend.Models.Job", "Job")
                        .WithMany("JobRoles")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("fk_job_roles_jobs1");

                    b.HasOne("backend.Models.Role", "Role")
                        .WithMany("JobRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_job_roles_roles1");

                    b.Navigation("Job");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("backend.Models.JobRoleDesc", b =>
                {
                    b.HasOne("backend.Models.JobRole", "JobRole")
                        .WithMany("JobRoleDescs")
                        .HasForeignKey("RolesId")
                        .IsRequired()
                        .HasConstraintName("fk_job_roles_desc_job_roles1");

                    b.Navigation("JobRole");
                });

            modelBuilder.Entity("backend.Models.JobSlot", b =>
                {
                    b.HasOne("backend.Models.Job", "Job")
                        .WithMany("JobSlots")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("fk_slots_has_jobs_jobs1");

                    b.HasOne("backend.Models.Slot", "Slot")
                        .WithMany("JobSlots")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("fk_slots_has_jobs_slots1");

                    b.Navigation("Job");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("backend.Models.ProfessionalQualification", b =>
                {
                    b.HasOne("backend.Models.ApplicationType", "ApplicationType")
                        .WithMany("ProfessionalQualifications")
                        .HasForeignKey("ApplicationTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_proqualification_application_types1");

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("ProfessionalQualifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_proqualification_users1");

                    b.Navigation("ApplicationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.ProfessionalQualificationExpertTech", b =>
                {
                    b.HasOne("backend.Models.ProfessionalQualification", "ProfessionalQualification")
                        .WithMany("ProfessionalQualificationExpertTeches")
                        .HasForeignKey("ProfessionalQualificationId")
                        .IsRequired()
                        .HasConstraintName("fk_techs_has_proqualification_proqualification1");

                    b.HasOne("backend.Models.Technology", "Technology")
                        .WithMany("ProfessionalQualificationExpertTeches")
                        .HasForeignKey("TechId")
                        .IsRequired()
                        .HasConstraintName("fk_techs_has_proqualification_techs1");

                    b.Navigation("ProfessionalQualification");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("backend.Models.ProfessionalQualificationFamiliarTech", b =>
                {
                    b.HasOne("backend.Models.ProfessionalQualification", "ProfessionalQualification")
                        .WithMany("ProfessionalQualificationFamiliarTeches")
                        .HasForeignKey("ProfessionalQualificationId")
                        .IsRequired()
                        .HasConstraintName("fk_techs_has_proqualification_proqualification2");

                    b.HasOne("backend.Models.Technology", "Technology")
                        .WithMany("ProfessionalQualificationFamiliarTeches")
                        .HasForeignKey("TechId")
                        .IsRequired()
                        .HasConstraintName("fk_techs_has_proqualification_techs2");

                    b.Navigation("ProfessionalQualification");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("backend.Models.Userasset", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Userassets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_userassets_users1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Userdetail", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Userdetails")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_userdetails_users1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.UserdetailsRole", b =>
                {
                    b.HasOne("backend.Models.Role", "Role")
                        .WithMany("UserdetailsRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_roles_has_userdetails_roles1");

                    b.HasOne("backend.Models.Userdetail", "Userdetail")
                        .WithMany("UserdetailsRoles")
                        .HasForeignKey("UserdetailId")
                        .IsRequired()
                        .HasConstraintName("fk_roles_has_userdetails_userdetails1");

                    b.Navigation("Role");

                    b.Navigation("Userdetail");
                });

            modelBuilder.Entity("backend.Models.Application", b =>
                {
                    b.Navigation("ApplicationRoles");
                });

            modelBuilder.Entity("backend.Models.ApplicationType", b =>
                {
                    b.Navigation("ProfessionalQualifications");
                });

            modelBuilder.Entity("backend.Models.College", b =>
                {
                    b.Navigation("EducationalQualifications");
                });

            modelBuilder.Entity("backend.Models.Job", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("JobDescs");

                    b.Navigation("JobRoles");

                    b.Navigation("JobSlots");
                });

            modelBuilder.Entity("backend.Models.JobRole", b =>
                {
                    b.Navigation("JobRoleDescs");
                });

            modelBuilder.Entity("backend.Models.Location", b =>
                {
                    b.Navigation("Colleges");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("backend.Models.ProfessionalQualification", b =>
                {
                    b.Navigation("ProfessionalQualificationExpertTeches");

                    b.Navigation("ProfessionalQualificationFamiliarTeches");
                });

            modelBuilder.Entity("backend.Models.Qualification", b =>
                {
                    b.Navigation("EducationalQualifications");
                });

            modelBuilder.Entity("backend.Models.Role", b =>
                {
                    b.Navigation("ApplicationRoles");

                    b.Navigation("JobRoles");

                    b.Navigation("UserdetailsRoles");
                });

            modelBuilder.Entity("backend.Models.Slot", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("JobSlots");
                });

            modelBuilder.Entity("backend.Models.Stream", b =>
                {
                    b.Navigation("EducationalQualifications");
                });

            modelBuilder.Entity("backend.Models.Technology", b =>
                {
                    b.Navigation("ProfessionalQualificationExpertTeches");

                    b.Navigation("ProfessionalQualificationFamiliarTeches");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("EducationalQualifications");

                    b.Navigation("ProfessionalQualifications");

                    b.Navigation("Userassets");

                    b.Navigation("Userdetails");
                });

            modelBuilder.Entity("backend.Models.Userdetail", b =>
                {
                    b.Navigation("UserdetailsRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
